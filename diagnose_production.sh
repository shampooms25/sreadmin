#!/bin/bash
# Diagn√≥stico e Corre√ß√£o para Produ√ß√£o Ubuntu
# Resolve problema de autentica√ß√£o 401

echo "üîç DIAGN√ìSTICO COMPLETO - Produ√ß√£o Ubuntu"
echo "========================================="

# Verificar se est√° no diret√≥rio correto
if [ ! -f "manage.py" ]; then
    echo "‚ùå Execute este script no diret√≥rio /var/www/sreadmin"
    exit 1
fi

echo ""
echo "1Ô∏è‚É£ VERIFICANDO AMBIENTE..."
echo "Diret√≥rio atual: $(pwd)"
echo "Usu√°rio atual: $(whoami)"
echo "Django settings: $DJANGO_SETTINGS_MODULE"

echo ""
echo "2Ô∏è‚É£ VERIFICANDO BANCO DE DADOS..."
python manage.py shell << 'EOF'
try:
    from captive_portal.models import ApplianceToken
    from django.db import connection
    
    print("‚úÖ Conex√£o com banco OK")
    
    # Verificar tabela ApplianceToken
    with connection.cursor() as cursor:
        cursor.execute("SELECT COUNT(*) FROM captive_portal_appliancetoken;")
        count = cursor.fetchone()[0]
        print(f"üìä Total de tokens na tabela: {count}")
    
    # Listar todos os tokens
    tokens = ApplianceToken.objects.all()
    print(f"üìã Tokens encontrados via Django ORM: {tokens.count()}")
    
    for token in tokens:
        print(f"   - {token.token[:20]}... | {token.appliance_name} | Ativo: {token.is_active}")
    
    # Verificar token espec√≠fico
    test_token = 'c8c786467d4a8d2825eaf549534d1ab0'
    try:
        token_obj = ApplianceToken.objects.get(token=test_token)
        print(f"‚úÖ Token de teste encontrado: {token_obj.appliance_name} - Ativo: {token_obj.is_active}")
    except ApplianceToken.DoesNotExist:
        print(f"‚ùå Token de teste N√ÉO encontrado: {test_token}")
        
        # Criar o token
        print("üîß Criando token de teste...")
        new_token = ApplianceToken.objects.create(
            token=test_token,
            appliance_id='POSTMAN-TEST',
            appliance_name='Appliance Teste Postman',
            description='Token para testes via Postman - Produ√ß√£o',
            is_active=True
        )
        print(f"‚úÖ Token criado: {new_token.appliance_name}")
        
except Exception as e:
    print(f"‚ùå Erro no banco de dados: {e}")
    import traceback
    traceback.print_exc()
EOF

echo ""
echo "3Ô∏è‚É£ VERIFICANDO AUTENTICA√á√ÉO..."
python manage.py shell << 'EOF'
from captive_portal.api_views import ApplianceAPIAuthentication
from unittest.mock import Mock

# Simular request
mock_request = Mock()
mock_request.META = {
    'HTTP_AUTHORIZATION': 'Bearer c8c786467d4a8d2825eaf549534d1ab0',
    'REMOTE_ADDR': '127.0.0.1'
}

print("üß™ Testando autentica√ß√£o...")
print(f"Authorization header: {mock_request.META['HTTP_AUTHORIZATION']}")

try:
    is_valid, result = ApplianceAPIAuthentication.verify_token(mock_request)
    
    if is_valid:
        print(f"‚úÖ Autentica√ß√£o OK!")
        print(f"   - Appliance ID: {result.username}")
        print(f"   - Appliance Name: {result.appliance_name}")
        print(f"   - Is Authenticated: {result.is_authenticated}")
    else:
        print(f"‚ùå Falha na autentica√ß√£o: {result}")
        
except Exception as e:
    print(f"‚ùå Erro na autentica√ß√£o: {e}")
    import traceback
    traceback.print_exc()
EOF

echo ""
echo "4Ô∏è‚É£ VERIFICANDO SERVIDOR..."
if pgrep -f "manage.py runserver" > /dev/null; then
    echo "‚úÖ Servidor Django est√° rodando"
    echo "Processos encontrados:"
    ps aux | grep "manage.py runserver" | grep -v grep
else
    echo "‚ùå Servidor Django N√ÉO est√° rodando"
    echo "üîß Iniciando servidor..."
    
    # Parar qualquer processo existente
    pkill -f "manage.py runserver" 2>/dev/null || true
    
    # Iniciar servidor
    nohup python manage.py runserver 0.0.0.0:8000 > django.log 2>&1 &
    sleep 3
    
    if pgrep -f "manage.py runserver" > /dev/null; then
        echo "‚úÖ Servidor iniciado com sucesso"
    else
        echo "‚ùå Falha ao iniciar servidor"
        echo "Log do servidor:"
        tail -20 django.log
    fi
fi

echo ""
echo "5Ô∏è‚É£ VERIFICANDO CONECTIVIDADE..."
echo "Testando localhost..."
curl -s -w "Status Code: %{http_code}\n" -o /dev/null http://127.0.0.1:8000/admin/ || echo "‚ùå Conex√£o falhou"

echo ""
echo "6Ô∏è‚É£ TESTANDO API..."
echo "Testando endpoint sem autentica√ß√£o..."
curl -s -w "Status Code: %{http_code}\n" -o /tmp/api_test.json http://127.0.0.1:8000/api/appliances/info/
echo "Resposta:"
cat /tmp/api_test.json 2>/dev/null || echo "Sem resposta"

echo ""
echo "Testando endpoint com autentica√ß√£o..."
curl -s -H "Authorization: Bearer c8c786467d4a8d2825eaf549534d1ab0" \
     -w "Status Code: %{http_code}\n" \
     -o /tmp/api_auth_test.json \
     http://127.0.0.1:8000/api/appliances/info/

echo "Resposta com auth:"
cat /tmp/api_auth_test.json 2>/dev/null || echo "Sem resposta"

echo ""
echo "7Ô∏è‚É£ VERIFICANDO LOGS..."
if [ -f "django.log" ]; then
    echo "√öltimas 10 linhas do log Django:"
    tail -10 django.log
fi

echo ""
echo "8Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES..."
python manage.py shell << 'EOF'
from django.conf import settings
import os

print(f"DEBUG: {settings.DEBUG}")
print(f"ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
print(f"BASE_DIR: {settings.BASE_DIR}")

# Verificar se arquivo appliance_tokens.json existe
json_file = os.path.join(settings.BASE_DIR, 'appliance_tokens.json')
print(f"appliance_tokens.json existe: {os.path.exists(json_file)}")

if os.path.exists(json_file):
    try:
        with open(json_file, 'r') as f:
            import json
            data = json.load(f)
            tokens_count = len(data.get('tokens', {}))
            print(f"Tokens no JSON: {tokens_count}")
    except Exception as e:
        print(f"Erro ao ler JSON: {e}")
EOF

echo ""
echo "9Ô∏è‚É£ INFORMA√á√ïES DO SISTEMA..."
echo "IP do servidor: $(hostname -I | awk '{print $1}')"
echo "Porta 8000 em uso:"
netstat -tlnp | grep :8000 || echo "Porta 8000 n√£o est√° sendo usada"

echo ""
echo "üîü CORRE√á√ïES AUTOM√ÅTICAS..."

# Ajustar permiss√µes
echo "Ajustando permiss√µes..."
chown -R www-data:www-data /var/www/sreadmin/ 2>/dev/null || echo "‚ö†Ô∏è N√£o foi poss√≠vel ajustar owner"
chmod -R 755 /var/www/sreadmin/ 2>/dev/null || echo "‚ö†Ô∏è N√£o foi poss√≠vel ajustar permiss√µes"

# Aplicar migra√ß√µes
echo "Verificando migra√ß√µes..."
python manage.py migrate --check 2>/dev/null || {
    echo "Aplicando migra√ß√µes..."
    python manage.py migrate
}

echo ""
echo "‚úÖ DIAGN√ìSTICO CONCLU√çDO!"
echo ""
echo "üåê URLs para teste externo:"
SERVER_IP=$(hostname -I | awk '{print $1}')
echo "   http://$SERVER_IP:8000/api/appliances/info/"
echo "   http://$SERVER_IP:8000/admin/"
echo ""
echo "üîë Token para teste:"
echo "   Authorization: Bearer c8c786467d4a8d2825eaf549534d1ab0"
echo ""
echo "üìã Pr√≥ximos passos se ainda n√£o funcionar:"
echo "   1. Verifique firewall: sudo ufw status"
echo "   2. Abra porta 8000: sudo ufw allow 8000"
echo "   3. Verifique se o IP est√° correto no Postman"
echo "   4. Use HTTP (n√£o HTTPS): http://$SERVER_IP:8000"
echo "   5. Veja logs em tempo real: tail -f django.log"
