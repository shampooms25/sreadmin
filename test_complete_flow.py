#!/usr/bin/env python
"""
Teste do fluxo completo de desativa√ß√£o de recarga autom√°tica via interface web
"""
import os
import sys
import django
from django.conf import settings
from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse

# Adicionar o diret√≥rio do projeto ao Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sreadmin.settings')

# Configurar Django
django.setup()

def test_disable_auto_recharge_flow():
    """
    Testa o fluxo completo de desativa√ß√£o de recarga autom√°tica
    """
    print("=== TESTE: Fluxo Completo de Desativa√ß√£o de Recarga Autom√°tica ===")
    print()
    
    # Dados de teste
    account_id = "ACC-2744134-64041-5"
    service_line_number = "SL-394709-12748-31"
    
    print(f"üìã DADOS DO TESTE:")
    print(f"   Conta: {account_id}")
    print(f"   Service Line: {service_line_number}")
    print()
    
    try:
        # Criar cliente de teste
        client = Client()
        
        # Criar usu√°rio admin para teste
        from django.contrib.auth.models import User
        admin_user = User.objects.create_superuser(
            username='testadmin',
            email='test@example.com',
            password='testpass123'
        )
        
        # Fazer login
        client.login(username='testadmin', password='testpass123')
        
        print("üîê USUARIO ADMIN CRIADO E LOGADO")
        print()
        
        # Teste 1: Acessar p√°gina de gerenciamento de recarga autom√°tica
        print("üîç TESTE 1: Acessar p√°gina de gerenciamento...")
        management_url = reverse('painel:starlink_auto_recharge_management')
        response = client.get(f"{management_url}?account_id={account_id}")
        
        print(f"   URL: {management_url}?account_id={account_id}")
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ SUCESSO: P√°gina de gerenciamento carregada")
        else:
            print("   ‚ùå ERRO: P√°gina de gerenciamento n√£o carregada")
            print(f"   Response: {response.content.decode()[:500]}...")
            return False
        
        print()
        
        # Teste 2: Acessar p√°gina de confirma√ß√£o de desativa√ß√£o
        print("üîç TESTE 2: Acessar p√°gina de confirma√ß√£o...")
        disable_url = reverse('painel:starlink_disable_auto_recharge')
        response = client.get(f"{disable_url}?account_id={account_id}&service_line={service_line_number}")
        
        print(f"   URL: {disable_url}?account_id={account_id}&service_line={service_line_number}")
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ SUCESSO: P√°gina de confirma√ß√£o carregada")
        else:
            print("   ‚ùå ERRO: P√°gina de confirma√ß√£o n√£o carregada")
            print(f"   Response: {response.content.decode()[:500]}...")
            return False
            
        print()
        
        # Teste 3: Simular confirma√ß√£o de desativa√ß√£o (sem executar realmente)
        print("üîç TESTE 3: Testar formul√°rio de confirma√ß√£o...")
        
        # Preparar dados do formul√°rio
        form_data = {
            'confirm': 'true',
            'account_id': account_id,
            'service_line_number': service_line_number
        }
        
        print(f"   Dados do formul√°rio: {form_data}")
        
        # Fazer requisi√ß√£o POST para confirma√ß√£o
        response = client.post(disable_url, form_data)
        
        print(f"   Status: {response.status_code}")
        
        if response.status_code in [200, 302]:  # 200 = sucesso, 302 = redirect
            print("   ‚úÖ SUCESSO: Formul√°rio processado")
            if response.status_code == 302:
                print(f"   Redirecionamento para: {response.get('Location', 'N/A')}")
        else:
            print("   ‚ùå ERRO: Formul√°rio n√£o processado")
            print(f"   Response: {response.content.decode()[:500]}...")
            return False
            
        print()
        
        # Teste 4: Verificar se URLs est√£o corretas
        print("üîç TESTE 4: Verificar URLs...")
        
        from django.urls import resolve
        
        # Testar resolu√ß√£o da URL de gerenciamento
        management_resolver = resolve('/admin/starlink/auto-recharge/')
        print(f"   URL de gerenciamento: {management_resolver.view_name}")
        
        # Testar resolu√ß√£o da URL de desativa√ß√£o
        disable_resolver = resolve('/admin/starlink/disable-auto-recharge/')
        print(f"   URL de desativa√ß√£o: {disable_resolver.view_name}")
        
        print("   ‚úÖ SUCESSO: URLs resolvidas corretamente")
        print()
        
        # Limpeza
        admin_user.delete()
        
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("   ‚úÖ P√°gina de gerenciamento carrega corretamente")
        print("   ‚úÖ P√°gina de confirma√ß√£o carrega corretamente")
        print("   ‚úÖ Formul√°rio de confirma√ß√£o processa corretamente")
        print("   ‚úÖ URLs est√£o configuradas corretamente")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTE DO FLUXO COMPLETO...")
    print()
    
    success = test_disable_auto_recharge_flow()
    
    print()
    print("=" * 80)
    if success:
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("   O fluxo completo de desativa√ß√£o est√° funcionando.")
        print("   Voc√™ pode acessar: http://localhost:8000/admin/starlink/auto-recharge/")
    else:
        print("‚ùå TESTE FALHOU!")
        print("   Verifique os erros acima para corrigir o problema.")
    
    print("=" * 80)
    print("‚úÖ TESTE FINALIZADO")
    print("=" * 80)
    
    sys.exit(0 if success else 1)
