import subprocess
import sys
import os

def execute_migration():
    """
    Executa a migra√ß√£o usando subprocess e mostra o output
    """
    print("üîÑ Executando migra√ß√£o do Django...")
    
    # Caminho para o Python do ambiente virtual
    python_path = r"C:\Projetos\Poppnet\sreadmin\venv\Scripts\python.exe"
    
    # Diret√≥rio do projeto
    project_dir = r"C:\Projetos\Poppnet\sreadmin"
    
    # Comando para executar
    cmd = [python_path, "manage.py", "migrate"]
    
    try:
        # Executar o comando
        result = subprocess.run(
            cmd,
            cwd=project_dir,
            capture_output=True,
            text=True,
            check=False  # N√£o lan√ßar exce√ß√£o em caso de erro
        )
        
        print(f"Return code: {result.returncode}")
        
        if result.stdout:
            print("üìÑ OUTPUT:")
            print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è ERRORS:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ Migra√ß√£o executada com sucesso!")
            return True
        else:
            print("‚ùå Erro na migra√ß√£o!")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar comando: {e}")
        return False

def test_table():
    """
    Testa se a tabela foi criada
    """
    print("\nüîç Testando se a tabela foi criada...")
    
    test_code = '''
import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sreadmin.settings")
django.setup()

try:
    from captive_portal.models import ApplianceToken
    count = ApplianceToken.objects.count()
    print(f"SUCCESS: Tabela existe! Registros: {count}")
except Exception as e:
    print(f"ERROR: {e}")
'''
    
    # Salvar c√≥digo em arquivo tempor√°rio
    with open("temp_test.py", "w") as f:
        f.write(test_code)
    
    # Executar teste
    python_path = r"C:\Projetos\Poppnet\sreadmin\venv\Scripts\python.exe"
    project_dir = r"C:\Projetos\Poppnet\sreadmin"
    
    try:
        result = subprocess.run(
            [python_path, "temp_test.py"],
            cwd=project_dir,
            capture_output=True,
            text=True
        )
        
        print("üìÑ RESULTADO DO TESTE:")
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(result.stderr)
        
        # Limpar arquivo tempor√°rio
        os.remove("temp_test.py")
        
        return "SUCCESS" in result.stdout
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ EXECU√á√ÉO FOR√áADA DE MIGRA√á√ÉO")
    print("=" * 40)
    
    # Executar migra√ß√£o
    migration_success = execute_migration()
    
    if migration_success:
        # Testar tabela
        table_success = test_table()
        
        if table_success:
            print("\nüéâ SUCESSO TOTAL!")
            print("‚úÖ Migra√ß√£o executada")
            print("‚úÖ Tabela ApplianceToken criada")
            print("‚úÖ Voc√™ pode acessar /admin/captive_portal/appliancetoken/")
        else:
            print("\n‚ö†Ô∏è Migra√ß√£o executada mas tabela n√£o acess√≠vel")
    else:
        print("\n‚ùå Falha na migra√ß√£o")
