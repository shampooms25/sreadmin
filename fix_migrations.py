#!/usr/bin/env python
"""
Fix Migration Conflicts - Produ√ß√£o
Resolve conflitos de migra√ß√µes quando tabelas j√° existem
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sreadmin.settings')
django.setup()

from django.db import connection
from django.core.management import call_command

def main():
    print("üîß Resolvendo conflitos de migra√ß√£o...")
    
    # 1. Verificar e marcar migra√ß√µes j√° aplicadas
    print("üìã Verificando estado das migra√ß√µes...")
    
    with connection.cursor() as cursor:
        # Verificar se tabelas existem
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('eld_gerenciar_portal', 'eld_upload_video', 'eld_registro_view_videos', 'eld_portal_sem_video');
        """)
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        print(f"Tabelas existentes: {existing_tables}")
        
        if existing_tables:
            print("üîÑ Marcando migra√ß√£o captive_portal.0001_initial como aplicada...")
            cursor.execute("""
                INSERT INTO django_migrations (app, name, applied) 
                VALUES ('captive_portal', '0001_initial', NOW()) 
                ON CONFLICT (app, name) DO NOTHING;
            """)
        
        # Verificar tabela ApplianceToken
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'captive_portal_appliancetoken'
            );
        """)
        
        if cursor.fetchone()[0]:
            print("üîÑ Marcando migra√ß√£o captive_portal.0004_appliancetoken como aplicada...")
            cursor.execute("""
                INSERT INTO django_migrations (app, name, applied) 
                VALUES ('captive_portal', '0004_appliancetoken', NOW()) 
                ON CONFLICT (app, name) DO NOTHING;
            """)
    
    # 2. Executar migra√ß√µes restantes
    print("üöÄ Executando migra√ß√µes...")
    try:
        call_command('migrate', verbosity=2)
        print("‚úÖ Migra√ß√µes aplicadas com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("üîÑ Tentando com --fake-initial...")
        try:
            call_command('migrate', fake_initial=True)
            print("‚úÖ Migra√ß√µes resolvidas com fake-initial!")
        except Exception as e2:
            print(f"‚ùå Erro persistente: {e2}")
            return False
    
    # 3. Verificar se tudo est√° funcionando
    print("üîç Verificando sistema...")
    try:
        from captive_portal.models import ApplianceToken
        count = ApplianceToken.objects.count()
        print(f"‚úÖ Sistema OK - {count} tokens no banco")
        
        # Testar admin
        from django.contrib.admin.sites import site
        print(f"‚úÖ Admin carregado - {len(site._registry)} modelos registrados")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: {e}")
    
    print("üéâ Resolu√ß√£o de conflitos conclu√≠da!")
    return True

if __name__ == '__main__':
    main()
