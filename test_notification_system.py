#!/usr/bin/env python3
"""
Script de teste para o sistema de notifica√ß√µes
Execute dentro do ambiente virtual: python test_notification_system.py
"""

import os
import sys
import django
from pathlib import Path

# Configurar Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sreadmin.settings')
django.setup()

from painel.services import NotificationService, ZipManagerService
from painel.notification_config import EMAIL_CONFIG, TELEGRAM_CONFIG, ZIP_CONFIG
from datetime import datetime

def test_configurations():
    """Testa se as configura√ß√µes est√£o corretas"""
    print("üîß Testando Configura√ß√µes...")
    
    # Email
    if EMAIL_CONFIG.get('EMAIL_USER') and EMAIL_CONFIG.get('EMAIL_PASSWORD'):
        print("‚úÖ Email: Credenciais configuradas")
    else:
        print("‚ö†Ô∏è  Email: Credenciais n√£o configuradas")
    
    # Telegram
    if TELEGRAM_CONFIG.get('BOT_TOKEN') and TELEGRAM_CONFIG.get('CHAT_ID'):
        print("‚úÖ Telegram: Token e Chat ID configurados")
    else:
        print("‚ùå Telegram: Token ou Chat ID n√£o configurados")
    
    # ZIP
    print(f"‚úÖ ZIP: Configura√ß√£o carregada - {ZIP_CONFIG.get('ZIP_FILENAME', 'N/A')}")
    print()

def test_telegram_notification():
    """Testa notifica√ß√£o do Telegram"""
    print("ü§ñ Testando Notifica√ß√£o Telegram...")
    
    try:
        # Simular um arquivo de v√≠deo
        class MockVideoFile:
            def __init__(self):
                self.name = "teste_video.mp4"
                self.size = 50 * 1024 * 1024  # 50MB
        
        class MockUser:
            def __init__(self):
                self.username = "admin_teste"
        
        mock_video = MockVideoFile()
        mock_user = MockUser()
        
        success = NotificationService.send_telegram_notification(mock_video, mock_user)
        
        if success:
            print("‚úÖ Notifica√ß√£o Telegram enviada com sucesso!")
        else:
            print("‚ùå Falha ao enviar notifica√ß√£o Telegram")
            
    except Exception as e:
        print(f"‚ùå Erro no teste Telegram: {str(e)}")
    
    print()

def test_email_notification():
    """Testa notifica√ß√£o por email"""
    print("üìß Testando Notifica√ß√£o Email...")
    
    if not EMAIL_CONFIG.get('EMAIL_USER') or not EMAIL_CONFIG.get('EMAIL_PASSWORD'):
        print("‚ö†Ô∏è  Pulando teste de email - credenciais n√£o configuradas")
        print("   Configure EMAIL_USER e EMAIL_PASSWORD em notification_config.py")
        print()
        return
    
    try:
        # Simular um arquivo de v√≠deo
        class MockVideoFile:
            def __init__(self):
                self.name = "teste_video.mp4"
                self.size = 50 * 1024 * 1024  # 50MB
        
        class MockUser:
            def __init__(self):
                self.username = "admin_teste"
        
        mock_video = MockVideoFile()
        mock_user = MockUser()
        
        success = NotificationService.send_email_notification(mock_video, mock_user)
        
        if success:
            print("‚úÖ Notifica√ß√£o Email enviada com sucesso!")
        else:
            print("‚ùå Falha ao enviar notifica√ß√£o Email")
            
    except Exception as e:
        print(f"‚ùå Erro no teste Email: {str(e)}")
    
    print()

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE DO SISTEMA DE NOTIFICA√á√ïES")
    print("=" * 50)
    print()
    
    test_configurations()
    test_telegram_notification()
    test_email_notification()
    
    print("üéØ RESUMO:")
    print("- Configure as credenciais de email em painel/notification_config.py")
    print("- Telegram j√° est√° configurado e funcionando")
    print("- Sistema pronto para receber uploads de v√≠deo!")
    print()
    print("üí° Para testar completamente:")
    print("1. Configure EMAIL_USER e EMAIL_PASSWORD")
    print("2. Fa√ßa upload de um v√≠deo pelo sistema")
    print("3. Verifique se chegaram as notifica√ß√µes")

if __name__ == "__main__":
    main()
